{"kernelspec":{"display_name":"Python 2 (SageMath)","language":"python","name":"python2"},"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.10"}}
{"cell_type":"markdown","metadata":{},"source":"# CTD casts from Line P"}
{"cell_type":"markdown","metadata":{},"source":"This IPython notebook plots CTD casts from historical stations along Canada's Line P in the North Pacific ocean. \n\nHistorical background on Line P can be found at:\nhttp://www.pac.dfo-mpo.gc.ca/science/oceans/data-donnees/line-p/history-histoire-eng.html\n\nThis notebook uses bottle (.che) files obtained at:\nhttp://www.pac.dfo-mpo.gc.ca/science/oceans/data-donnees/line-p/data-eng.html\n\nWritten by Tom Connolly (tconnolly@mlml.calstate.edu) \nfor MS142 (Physical Oceanography)\nAugust 2015"}
{"cell_type":"code","execution_count":1,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"name":"stdout","output_type":"stream","text":"Populating the interactive namespace from numpy and matplotlib\n"}],"source":"%pylab inline\nimport gsw as gsw\nimport numpy as np\nfrom re import sub\nfrom matplotlib import pyplot as plt"}
{"cell_type":"code","execution_count":2,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"# Load and plot bottle data from Line P cruises\n# data from \n\nfilename = \"2006-08-0026.che\"\n\n# read in data\nf = open(filename, 'r')\n\nreaddata = False\nfirstline = True\nfor line in f.xreadlines():\n    if readdata==True:\n        line = sub(\"[a-z]\", ' ', line) # strip flag characters\n        d = np.fromstring(line,sep=\" \")\n        if firstline == True:\n            data = d\n            firstline = False\n        else:\n            data = np.vstack((data,d))\n    if line.startswith(\"*END OF HEADER\")==True:\n        readdata=True          \n    # get station position from header\n    if \"LATITUDE\" in line:\n        starti = line.index(\":\")+1\n        endi = line.index(\"N\")-1\n        degmin = np.fromstring(line[starti:endi],sep=\" \")\n        lat = degmin[0]+degmin[1]/60\n    if \"LONGITUDE\" in line:\n        starti = line.index(\":\")+1\n        endi = line.index(\"W\")-1\n        degmin = np.fromstring(line[starti:endi],sep=\" \")\n        lon = -degmin[0]-degmin[1]/60\n    if \"STATION\" in line:\n        starti = line.index(\":\")+1\n        station_name = line[starti:-2]\n    if \"START TIME\" in line:    \n        starti = line.index(\"C\")+1 \n        endi = line.index(\".\") \n        date_string = line[starti:endi]\n    \nf.close()\n      \nncol = data.shape[1]    \n    \np = data[:,0]   # pressure [dbar]\nT = data[:,1]   # temperature [deg C]\nSp = data[:,2]  # practical salinity\nif ncol >= 4:\n    O2 = data[:,3]\nif ncol >= 5:\n    nitrate = data[:,4]\nif ncol >= 6:\n    phosphate = data[:,5]\nif ncol >= 7:\n    silicate = data[:,6]"}
{"cell_type":"code","execution_count":3,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":"SA = gsw.SA_from_SP(Sp,p,lon,lat)\nTpot = gsw.pt_from_t(SA, T, p, 0)\nCT = gsw.CT_from_t(SA,T,p)"}
{"cell_type":"code","execution_count":4,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"<matplotlib.text.Text at 0x7f607296dbd0>"},"execution_count":4,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"smc-blob::2e51c07a-300d-4fa8-adcb-fba267509fcc","text/plain":"<matplotlib.figure.Figure at 0x7f607272a890>"},"metadata":{},"output_type":"display_data"}],"source":"plt.plot(T,p,'b-o')\nplt.plot(Tpot,p,'k-o')\nplt.plot(CT,p,'r-o')\nplt.gca().invert_yaxis()\nplt.xlabel('T, $\\\\theta$, $\\Theta$ [deg C]')\nplt.ylabel('pressure [dbar]')\nplt.title(station_name + ' ' + date_string)"}
{"cell_type":"code","execution_count":5,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"text/plain":"<matplotlib.text.Text at 0x7f6072a988d0>"},"execution_count":5,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"smc-blob::999e1231-f520-47c9-a1cf-e2e2cfb97bf5","text/plain":"<matplotlib.figure.Figure at 0x7f6072a5d950>"},"metadata":{},"output_type":"display_data"}],"source":"plt.plot(Sp,p,'-o')\nplt.plot(SA,p,'-o')\nplt.gca().invert_yaxis()\nplt.xlabel('$S_p$ [psu], $S_A$ [g/kg]')\nplt.ylabel('pressure [dbar]')\nplt.title(station_name + ' ' + date_string)"}
{"cell_type":"code","execution_count":9,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"image/png":"smc-blob::41656f51-7287-49a8-8cf0-75bdc88aeda9","text/plain":"<matplotlib.figure.Figure at 0x7f60701449d0>"},"metadata":{},"output_type":"display_data"}],"source":"plt.plot(SA,CT,'-o')\nplt.xlabel('absolute salinity')\nplt.ylabel('conservative temperature [deg C]')\nplt.title(station_name + ' ' + date_string)\nplt.show()"}
{"cell_type":"code","execution_count":7,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"image/png":"smc-blob::9716610f-da13-4066-8a86-ab1d0c7f8818","text/plain":"<matplotlib.figure.Figure at 0x7f607026fc10>"},"metadata":{},"output_type":"display_data"}],"source":"if ncol >= 4:\n    plt.plot(O2,p,'-o')\n    plt.gca().invert_yaxis()\n    plt.xlabel('oxygen [$\\mu$mol/kg]')\n    plt.ylabel('pressure')\n    plt.title(station_name + ' ' + date_string)"}
{"cell_type":"code","execution_count":8,"metadata":{"collapsed":false,"trusted":false},"outputs":[{"data":{"image/png":"smc-blob::cb54b2e5-3c95-47f4-82e6-6c285ce82b65","text/plain":"<matplotlib.figure.Figure at 0x7f6070147110>"},"metadata":{},"output_type":"display_data"}],"source":"if ncol >= 5:\n    plt.plot(nitrate,O2,'-o')\n    plt.xlabel('nitrate+nitrite [$\\mu$mol/L]')\n    plt.ylabel('oxygen [$\\mu$mol/kg]')\n    plt.title(station_name + ' ' + date_string)"}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":""}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":""}
{"cell_type":"code","execution_count":null,"metadata":{"collapsed":false,"trusted":false},"outputs":[],"source":""}